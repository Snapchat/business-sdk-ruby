=begin
#Snap Conversions API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module SnapBusinessSDK
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of test events in last 24 hours
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseLogs]
    def conversion_validate_logs(asset_id, opts = {})
      data, _status_code, _headers = conversion_validate_logs_with_http_info(asset_id, opts)
      data
    end

    # Returns a list of test events in last 24 hours
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseLogs, Integer, Hash)>] ResponseLogs data, response status code and response headers
    def conversion_validate_logs_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.conversion_validate_logs ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.conversion_validate_logs"
      end
      # resource path
      local_var_path = '/v2/conversion/validate/logs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_id'] = asset_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseLogs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.conversion_validate_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#conversion_validate_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the stats on test and non-test events in the past hour
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseStats]
    def conversion_validate_stats(asset_id, opts = {})
      data, _status_code, _headers = conversion_validate_stats_with_http_info(asset_id, opts)
      data
    end

    # Returns the stats on test and non-test events in the past hour
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseStats, Integer, Hash)>] ResponseStats data, response status code and response headers
    def conversion_validate_stats_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.conversion_validate_stats ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.conversion_validate_stats"
      end
      # resource path
      local_var_path = '/v2/conversion/validate/stats'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_id'] = asset_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseStats'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.conversion_validate_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#conversion_validate_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<CapiEvent>] :body Snap Conversions API
    # @return [Response]
    def send_data(opts = {})
      data, _status_code, _headers = send_data_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<CapiEvent>] :body Snap Conversions API
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def send_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_data ...'
      end
      # resource path
      local_var_path = '/v2/conversion'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.send_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<CapiEvent>] :body Snap Conversions API
    # @return [TestResponse]
    def send_test_data(opts = {})
      data, _status_code, _headers = send_test_data_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<CapiEvent>] :body Snap Conversions API
    # @return [Array<(TestResponse, Integer, Hash)>] TestResponse data, response status code and response headers
    def send_test_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_test_data ...'
      end
      # resource path
      local_var_path = '/v2/conversion/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.send_test_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_test_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
