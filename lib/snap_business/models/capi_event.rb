=begin
#Snap Conversions API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

require_relative 'capi_event_ext'

module SnapBusinessSDK
  class CapiEvent
    prepend CapiEventExt

    attr_accessor :pixel_id

    attr_accessor :app_id

    attr_accessor :snap_app_id

    attr_accessor :event_type

    attr_accessor :event_conversion_type

    attr_accessor :event_tag

    attr_accessor :timestamp

    attr_accessor :hashed_email

    attr_accessor :hashed_mobile_ad_id

    attr_accessor :uuid_c1

    attr_accessor :hashed_idfv

    attr_accessor :hashed_phone_number

    attr_accessor :user_agent

    attr_accessor :hashed_ip_address

    attr_accessor :item_category

    attr_accessor :item_ids

    attr_accessor :description

    attr_accessor :number_items

    attr_accessor :price

    attr_accessor :currency

    attr_accessor :transaction_id

    attr_accessor :level

    attr_accessor :client_dedup_id

    attr_accessor :data_use

    attr_accessor :search_string

    attr_accessor :page_url

    attr_accessor :sign_up_method

    attr_accessor :hashed_first_name_sha

    attr_accessor :hashed_first_name_sdx

    attr_accessor :hashed_middle_name_sha

    attr_accessor :hashed_middle_name_sdx

    attr_accessor :hashed_last_name_sha

    attr_accessor :hashed_last_name_sdx

    attr_accessor :hashed_city_sha

    attr_accessor :hashed_city_sdx

    attr_accessor :hashed_state_sha

    attr_accessor :hashed_state_sdx

    attr_accessor :hashed_zip

    attr_accessor :hashed_dob_month

    attr_accessor :hashed_dob_day

    attr_accessor :integration

    attr_accessor :click_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pixel_id' => :'pixel_id',
        :'app_id' => :'app_id',
        :'snap_app_id' => :'snap_app_id',
        :'event_type' => :'event_type',
        :'event_conversion_type' => :'event_conversion_type',
        :'event_tag' => :'event_tag',
        :'timestamp' => :'timestamp',
        :'hashed_email' => :'hashed_email',
        :'hashed_mobile_ad_id' => :'hashed_mobile_ad_id',
        :'uuid_c1' => :'uuid_c1',
        :'hashed_idfv' => :'hashed_idfv',
        :'hashed_phone_number' => :'hashed_phone_number',
        :'user_agent' => :'user_agent',
        :'hashed_ip_address' => :'hashed_ip_address',
        :'item_category' => :'item_category',
        :'item_ids' => :'item_ids',
        :'description' => :'description',
        :'number_items' => :'number_items',
        :'price' => :'price',
        :'currency' => :'currency',
        :'transaction_id' => :'transaction_id',
        :'level' => :'level',
        :'client_dedup_id' => :'client_dedup_id',
        :'data_use' => :'data_use',
        :'search_string' => :'search_string',
        :'page_url' => :'page_url',
        :'sign_up_method' => :'sign_up_method',
        :'hashed_first_name_sha' => :'hashed_first_name_sha',
        :'hashed_first_name_sdx' => :'hashed_first_name_sdx',
        :'hashed_middle_name_sha' => :'hashed_middle_name_sha',
        :'hashed_middle_name_sdx' => :'hashed_middle_name_sdx',
        :'hashed_last_name_sha' => :'hashed_last_name_sha',
        :'hashed_last_name_sdx' => :'hashed_last_name_sdx',
        :'hashed_city_sha' => :'hashed_city_sha',
        :'hashed_city_sdx' => :'hashed_city_sdx',
        :'hashed_state_sha' => :'hashed_state_sha',
        :'hashed_state_sdx' => :'hashed_state_sdx',
        :'hashed_zip' => :'hashed_zip',
        :'hashed_dob_month' => :'hashed_dob_month',
        :'hashed_dob_day' => :'hashed_dob_day',
        :'integration' => :'integration',
        :'click_id' => :'click_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pixel_id' => :'String',
        :'app_id' => :'String',
        :'snap_app_id' => :'String',
        :'event_type' => :'String',
        :'event_conversion_type' => :'String',
        :'event_tag' => :'String',
        :'timestamp' => :'String',
        :'hashed_email' => :'String',
        :'hashed_mobile_ad_id' => :'String',
        :'uuid_c1' => :'String',
        :'hashed_idfv' => :'String',
        :'hashed_phone_number' => :'String',
        :'user_agent' => :'String',
        :'hashed_ip_address' => :'String',
        :'item_category' => :'String',
        :'item_ids' => :'String',
        :'description' => :'String',
        :'number_items' => :'String',
        :'price' => :'String',
        :'currency' => :'String',
        :'transaction_id' => :'String',
        :'level' => :'String',
        :'client_dedup_id' => :'String',
        :'data_use' => :'String',
        :'search_string' => :'String',
        :'page_url' => :'String',
        :'sign_up_method' => :'String',
        :'hashed_first_name_sha' => :'String',
        :'hashed_first_name_sdx' => :'String',
        :'hashed_middle_name_sha' => :'String',
        :'hashed_middle_name_sdx' => :'String',
        :'hashed_last_name_sha' => :'String',
        :'hashed_last_name_sdx' => :'String',
        :'hashed_city_sha' => :'String',
        :'hashed_city_sdx' => :'String',
        :'hashed_state_sha' => :'String',
        :'hashed_state_sdx' => :'String',
        :'hashed_zip' => :'String',
        :'hashed_dob_month' => :'String',
        :'hashed_dob_day' => :'String',
        :'integration' => :'String',
        :'click_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SnapBusinessSDK::CapiEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SnapBusinessSDK::CapiEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pixel_id')
        self.pixel_id = attributes[:'pixel_id']
      end

      if attributes.key?(:'app_id')
        self.app_id = attributes[:'app_id']
      end

      if attributes.key?(:'snap_app_id')
        self.snap_app_id = attributes[:'snap_app_id']
      end

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      end

      if attributes.key?(:'event_conversion_type')
        self.event_conversion_type = attributes[:'event_conversion_type']
      end

      if attributes.key?(:'event_tag')
        self.event_tag = attributes[:'event_tag']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'hashed_email')
        self.hashed_email = attributes[:'hashed_email']
      end

      if attributes.key?(:'hashed_mobile_ad_id')
        self.hashed_mobile_ad_id = attributes[:'hashed_mobile_ad_id']
      end

      if attributes.key?(:'uuid_c1')
        self.uuid_c1 = attributes[:'uuid_c1']
      end

      if attributes.key?(:'hashed_idfv')
        self.hashed_idfv = attributes[:'hashed_idfv']
      end

      if attributes.key?(:'hashed_phone_number')
        self.hashed_phone_number = attributes[:'hashed_phone_number']
      end

      if attributes.key?(:'user_agent')
        self.user_agent = attributes[:'user_agent']
      end

      if attributes.key?(:'hashed_ip_address')
        self.hashed_ip_address = attributes[:'hashed_ip_address']
      end

      if attributes.key?(:'item_category')
        self.item_category = attributes[:'item_category']
      end

      if attributes.key?(:'item_ids')
        self.item_ids = attributes[:'item_ids']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'number_items')
        self.number_items = attributes[:'number_items']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.key?(:'client_dedup_id')
        self.client_dedup_id = attributes[:'client_dedup_id']
      end

      if attributes.key?(:'data_use')
        self.data_use = attributes[:'data_use']
      end

      if attributes.key?(:'search_string')
        self.search_string = attributes[:'search_string']
      end

      if attributes.key?(:'page_url')
        self.page_url = attributes[:'page_url']
      end

      if attributes.key?(:'sign_up_method')
        self.sign_up_method = attributes[:'sign_up_method']
      end

      if attributes.key?(:'hashed_first_name_sha')
        self.hashed_first_name_sha = attributes[:'hashed_first_name_sha']
      end

      if attributes.key?(:'hashed_first_name_sdx')
        self.hashed_first_name_sdx = attributes[:'hashed_first_name_sdx']
      end

      if attributes.key?(:'hashed_middle_name_sha')
        self.hashed_middle_name_sha = attributes[:'hashed_middle_name_sha']
      end

      if attributes.key?(:'hashed_middle_name_sdx')
        self.hashed_middle_name_sdx = attributes[:'hashed_middle_name_sdx']
      end

      if attributes.key?(:'hashed_last_name_sha')
        self.hashed_last_name_sha = attributes[:'hashed_last_name_sha']
      end

      if attributes.key?(:'hashed_last_name_sdx')
        self.hashed_last_name_sdx = attributes[:'hashed_last_name_sdx']
      end

      if attributes.key?(:'hashed_city_sha')
        self.hashed_city_sha = attributes[:'hashed_city_sha']
      end

      if attributes.key?(:'hashed_city_sdx')
        self.hashed_city_sdx = attributes[:'hashed_city_sdx']
      end

      if attributes.key?(:'hashed_state_sha')
        self.hashed_state_sha = attributes[:'hashed_state_sha']
      end

      if attributes.key?(:'hashed_state_sdx')
        self.hashed_state_sdx = attributes[:'hashed_state_sdx']
      end

      if attributes.key?(:'hashed_zip')
        self.hashed_zip = attributes[:'hashed_zip']
      end

      if attributes.key?(:'hashed_dob_month')
        self.hashed_dob_month = attributes[:'hashed_dob_month']
      end

      if attributes.key?(:'hashed_dob_day')
        self.hashed_dob_day = attributes[:'hashed_dob_day']
      end

      if attributes.key?(:'integration')
        self.integration = attributes[:'integration']
      end

      if attributes.key?(:'click_id')
        self.click_id = attributes[:'click_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pixel_id == o.pixel_id &&
          app_id == o.app_id &&
          snap_app_id == o.snap_app_id &&
          event_type == o.event_type &&
          event_conversion_type == o.event_conversion_type &&
          event_tag == o.event_tag &&
          timestamp == o.timestamp &&
          hashed_email == o.hashed_email &&
          hashed_mobile_ad_id == o.hashed_mobile_ad_id &&
          uuid_c1 == o.uuid_c1 &&
          hashed_idfv == o.hashed_idfv &&
          hashed_phone_number == o.hashed_phone_number &&
          user_agent == o.user_agent &&
          hashed_ip_address == o.hashed_ip_address &&
          item_category == o.item_category &&
          item_ids == o.item_ids &&
          description == o.description &&
          number_items == o.number_items &&
          price == o.price &&
          currency == o.currency &&
          transaction_id == o.transaction_id &&
          level == o.level &&
          client_dedup_id == o.client_dedup_id &&
          data_use == o.data_use &&
          search_string == o.search_string &&
          page_url == o.page_url &&
          sign_up_method == o.sign_up_method &&
          hashed_first_name_sha == o.hashed_first_name_sha &&
          hashed_first_name_sdx == o.hashed_first_name_sdx &&
          hashed_middle_name_sha == o.hashed_middle_name_sha &&
          hashed_middle_name_sdx == o.hashed_middle_name_sdx &&
          hashed_last_name_sha == o.hashed_last_name_sha &&
          hashed_last_name_sdx == o.hashed_last_name_sdx &&
          hashed_city_sha == o.hashed_city_sha &&
          hashed_city_sdx == o.hashed_city_sdx &&
          hashed_state_sha == o.hashed_state_sha &&
          hashed_state_sdx == o.hashed_state_sdx &&
          hashed_zip == o.hashed_zip &&
          hashed_dob_month == o.hashed_dob_month &&
          hashed_dob_day == o.hashed_dob_day &&
          integration == o.integration &&
          click_id == o.click_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pixel_id, app_id, snap_app_id, event_type, event_conversion_type, event_tag, timestamp, hashed_email, hashed_mobile_ad_id, uuid_c1, hashed_idfv, hashed_phone_number, user_agent, hashed_ip_address, item_category, item_ids, description, number_items, price, currency, transaction_id, level, client_dedup_id, data_use, search_string, page_url, sign_up_method, hashed_first_name_sha, hashed_first_name_sdx, hashed_middle_name_sha, hashed_middle_name_sdx, hashed_last_name_sha, hashed_last_name_sdx, hashed_city_sha, hashed_city_sdx, hashed_state_sha, hashed_state_sdx, hashed_zip, hashed_dob_month, hashed_dob_day, integration, click_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SnapBusinessSDK.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
